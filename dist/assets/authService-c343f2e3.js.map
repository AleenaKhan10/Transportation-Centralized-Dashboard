{"version":3,"file":"authService-c343f2e3.js","sources":["../../src/services/authService.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\nimport { \r\n  LoginCredentials, \r\n  SignupCredentials,\r\n  AuthResponse, \r\n  User, \r\n  ApiResponse \r\n} from '../types/index'\r\n\r\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api'\r\n\r\n// Create axios instance\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n\r\n// Request interceptor to add auth token\r\napiClient.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('auth_token')\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`\r\n  }\r\n  return config\r\n})\r\n\r\n// Response interceptor for error handling\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('auth_token')\r\n      localStorage.removeItem('refresh_token')\r\n      window.location.href = '/login'\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport const authService = {\r\n  // Login user\r\n  login: async (credentials: LoginCredentials): Promise<AxiosResponse<AuthResponse>> => {\r\n    return apiClient.post('/auth/login', credentials)\r\n  },\r\n\r\n  // Sign up user\r\n  signup: async (credentials: SignupCredentials): Promise<AxiosResponse<ApiResponse<User>>> => {\r\n    return apiClient.post('/auth/signup', credentials)\r\n  },\r\n\r\n  // Logout user\r\n  logout: async (): Promise<AxiosResponse<ApiResponse>> => {\r\n    return apiClient.post('/auth/logout')\r\n  },\r\n\r\n  // Refresh token\r\n  refreshToken: async (refreshToken: string): Promise<AxiosResponse<AuthResponse>> => {\r\n    return apiClient.post('/auth/refresh', { refreshToken })\r\n  },\r\n\r\n  // Get current user profile\r\n  getCurrentUser: async (): Promise<AxiosResponse<ApiResponse<User>>> => {\r\n    return apiClient.get('/auth/me')\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (userData: Partial<User>): Promise<AxiosResponse<ApiResponse<User>>> => {\r\n    return apiClient.put('/auth/profile', userData)\r\n  },\r\n\r\n  // Forgot password\r\n  forgotPassword: async (email: string): Promise<AxiosResponse<ApiResponse>> => {\r\n    return apiClient.post('/auth/forgot-password', { email })\r\n  },\r\n\r\n  // Reset password\r\n  resetPassword: async (token: string, password: string): Promise<AxiosResponse<ApiResponse>> => {\r\n    return apiClient.post('/auth/reset-password', { token, password })\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (currentPassword: string, newPassword: string): Promise<AxiosResponse<ApiResponse>> => {\r\n    return apiClient.post('/auth/change-password', { currentPassword, newPassword })\r\n  },\r\n\r\n  // Verify email address\r\n  verifyEmail: async (token: string): Promise<AxiosResponse<ApiResponse>> => {\r\n    return apiClient.post('/auth/verify-email', { token })\r\n  },\r\n\r\n  // Resend verification email\r\n  resendVerification: async (): Promise<AxiosResponse<ApiResponse>> => {\r\n    return apiClient.post('/auth/resend-verification')\r\n  },\r\n\r\n  // Check if email exists\r\n  checkEmail: async (email: string): Promise<AxiosResponse<ApiResponse<{ exists: boolean }>>> => {\r\n    return apiClient.post('/auth/check-email', { email })\r\n  },\r\n\r\n  // Validate token\r\n  validateToken: async (token: string): Promise<AxiosResponse<ApiResponse<{ valid: boolean }>>> => {\r\n    return apiClient.post('/auth/validate-token', { token })\r\n  },\r\n}\r\n\r\n// Mock Auth Service for Development\r\nexport const mockAuthService = {\r\n  login: async (credentials: LoginCredentials) => {\r\n    await new Promise(resolve => setTimeout(resolve, 1000))\r\n    \r\n    if (credentials.email === 'admin@agelogistics.com' && credentials.password === 'admin123') {\r\n      const mockUser: User = {\r\n        id: '1',\r\n        email: 'admin@agelogistics.com',\r\n        fullName: 'Agy Logistics Admin',\r\n        phone: '+1234567890',\r\n        avatar: undefined,\r\n        role: {\r\n          id: '1',\r\n          name: 'Super Admin',\r\n          slug: 'super_admin',\r\n          description: 'Full system access',\r\n          level: 100,\r\n          permissions: []\r\n        },\r\n        permissions: [\r\n          {\r\n            id: '1',\r\n            name: 'Manage All',\r\n            slug: 'manage_all',\r\n            resource: 'system',\r\n            action: 'manage',\r\n            description: 'Full system access'\r\n          }\r\n        ],\r\n        status: 'active',\r\n        createdAt: '2024-01-01T00:00:00Z',\r\n        updatedAt: '2024-01-01T00:00:00Z',\r\n        lastLoginAt: new Date().toISOString()\r\n      }\r\n\r\n      return {\r\n        data: {\r\n          user: mockUser,\r\n          token: 'mock_jwt_token_12345',\r\n          refreshToken: 'mock_refresh_token_12345',\r\n          expiresIn: 3600\r\n        }\r\n      } as any\r\n    }\r\n\r\n    throw new Error('Invalid credentials')\r\n  },\r\n\r\n  signup: async (credentials: SignupCredentials) => {\r\n    await new Promise(resolve => setTimeout(resolve, 1500))\r\n    \r\n    // Mock validation\r\n    if (!credentials.email || !credentials.password || !credentials.fullName) {\r\n      throw new Error('All fields are required')\r\n    }\r\n\r\n    if (credentials.email === 'admin@agelogistics.com') {\r\n      throw new Error('Email already exists')\r\n    }\r\n\r\n    const mockUser: User = {\r\n      id: Math.random().toString(36).substr(2, 9),\r\n      email: credentials.email,\r\n      fullName: credentials.fullName,\r\n      phone: undefined,\r\n      avatar: undefined,\r\n      role: {\r\n        id: '3',\r\n        name: 'Pending User',\r\n        slug: 'pending',\r\n        description: 'Pending approval',\r\n        level: 0,\r\n        permissions: []\r\n      },\r\n      permissions: [],\r\n      status: 'pending',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    }\r\n\r\n    return {\r\n      data: mockUser\r\n    } as any\r\n  },\r\n\r\n  logout: async () => {\r\n    await new Promise(resolve => setTimeout(resolve, 500))\r\n    return { data: { success: true } } as any\r\n  },\r\n\r\n  refreshToken: async (_refreshToken: string) => {\r\n    await new Promise(resolve => setTimeout(resolve, 500))\r\n    return {\r\n      data: {\r\n        token: 'new_mock_jwt_token_12345',\r\n        refreshToken: 'new_mock_refresh_token_12345',\r\n        expiresIn: 3600\r\n      }\r\n    } as any\r\n  },\r\n\r\n  getCurrentUser: async () => {\r\n    await new Promise(resolve => setTimeout(resolve, 500))\r\n    const token = localStorage.getItem('auth_token')\r\n    if (!token) {\r\n      throw new Error('Not authenticated')\r\n    }\r\n\r\n    return {\r\n      data: {\r\n        user: JSON.parse(localStorage.getItem('auth_user') || '{}')\r\n      }\r\n    } as any\r\n  },\r\n\r\n  updateProfile: async (userData: Partial<User>) => {\r\n    await new Promise(resolve => setTimeout(resolve, 1000))\r\n    const currentUser = JSON.parse(localStorage.getItem('auth_user') || '{}')\r\n    const updatedUser = { ...currentUser, ...userData, updatedAt: new Date().toISOString() }\r\n    \r\n    localStorage.setItem('auth_user', JSON.stringify(updatedUser))\r\n    \r\n    return {\r\n      data: updatedUser\r\n    } as any\r\n  },\r\n\r\n  forgotPassword: async (email: string) => {\r\n    await new Promise(resolve => setTimeout(resolve, 1500))\r\n    \r\n    if (!email) {\r\n      throw new Error('Email is required')\r\n    }\r\n\r\n    return {\r\n      data: { \r\n        success: true,\r\n        message: 'Password reset instructions sent to your email'\r\n      }\r\n    } as any\r\n  },\r\n\r\n  resetPassword: async (token: string, password: string) => {\r\n    await new Promise(resolve => setTimeout(resolve, 1500))\r\n    \r\n    if (!token || !password) {\r\n      throw new Error('Token and password are required')\r\n    }\r\n\r\n    return {\r\n      data: { \r\n        success: true,\r\n        message: 'Password reset successfully'\r\n      }\r\n    } as any\r\n  },\r\n\r\n  changePassword: async (currentPassword: string, newPassword: string) => {\r\n    await new Promise(resolve => setTimeout(resolve, 1000))\r\n    \r\n    if (!currentPassword || !newPassword) {\r\n      throw new Error('Current and new passwords are required')\r\n    }\r\n\r\n    return {\r\n      data: { \r\n        success: true,\r\n        message: 'Password changed successfully'\r\n      }\r\n    } as any\r\n  }\r\n}\r\n\r\n// Export the configured axios instance for other services\r\nexport { apiClient } "],"names":["API_BASE_URL","apiClient","axios","config","token","response","error","_a","authService","credentials","refreshToken","userData","email","password","currentPassword","newPassword","mockAuthService","resolve","_refreshToken","updatedUser"],"mappings":"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"}